
# just to strongly type
from typing import _SpecialForm
import chess

##### VALUE AND PIECE SQUARE TABLES #####
# https://www.chessprogramming.org/Simplified_Evaluation_Function #
### only chose these bc they were symettrical ###
values = {'P': 82, "N": 337, "B": 365, "R": 477, "Q": 1025}
pst = {
    'p': (0,  0,  0,  0,  0,  0,  0,  0,
          50, 50, 50, 50, 50, 50, 50, 50,
          10, 10, 20, 30, 30, 20, 10, 10,
          5,  5, 10, 25, 25, 10,  5,  5,
          0,  0,  0, 20, 20,  0,  0,  0,
          5, -5, -10,  0,  0, -10, -5,  5,
          5, 10, 10, -20, -20, 10, 10,  5,
          0,  0,  0,  0,  0,  0,  0,  0),
    'n': (-50, -40, -30, -30, -30, -30, -40, -50,
          -40, -20,  0,  0,  0,  0, -20, -40,
          -30,  0, 10, 15, 15, 10,  0, -30,
          -30,  5, 15, 20, 20, 15,  5, -30,
          -30,  0, 15, 20, 20, 15,  0, -30,
          -30,  5, 10, 15, 15, 10,  5, -30,
          -40, -20,  0,  5,  5,  0, -20, -40,
          -50, -40, -30, -30, -30, -30, -40, -50),
    'b': (-20, -10, -10, -10, -10, -10, -10, -20,
          -10,  0,  0,  0,  0,  0,  0, -10,
          -10,  0,  5, 10, 10,  5,  0, -10,
          -10,  5,  5, 10, 10,  5,  5, -10,
          -10,  0, 10, 10, 10, 10,  0, -10,
          -10, 10, 10, 10, 10, 10, 10, -10,
          -10,  5,  0,  0,  0,  0,  5, -10,
          -20, -10, -10, -10, -10, -10, -10, -20,),
    'r': (0,  0,  0,  0,  0,  0,  0,  0,
          5, 10, 10, 10, 10, 10, 10,  5,
          -5,  0,  0,  0,  0,  0,  0, -5,
          -5,  0,  0,  0,  0,  0,  0, -5,
          -5,  0,  0,  0,  0,  0,  0, -5,
          -5,  0,  0,  0,  0,  0,  0, -5,
          -5,  0,  0,  0,  0,  0,  0, -5,
          0,  0,  0,  5,  5,  0,  0,  0),
    'q': (-20, -10, -10, -5, -5, -10, -10, -20,
          -10,  0,  0,  0,  0,  0,  0, -10,
          -10,  0,  5,  5,  5,  5,  0, -10,
          -5,  0,  5,  5,  5,  5,  0, -5,
          0,  0,  5,  5,  5,  5,  0, -5,
          -10,  5,  5,  5,  5,  5,  0, -10,
          -10,  0,  5,  0,  0,  0,  0, -10,
          -20, -10, -10, -5, -5, -10, -10, -20),
    'k': (-30, -40, -40, -50, -50, -40, -40, -30,
          -30, -40, -40, -50, -50, -40, -40, -30,
          -30, -40, -40, -50, -50, -40, -40, -30,
          -30, -40, -40, -50, -50, -40, -40, -30,
          -20, -30, -30, -40, -40, -30, -30, -20,
          -10, -20, -20, -20, -20, -20, -20, -10,
          20, 20,  0,  0,  0,  0, 20, 20,
          20, 30, 10,  0,  0, 10, 30, 20),
    'P': (0,  0,  0,  0,  0,  0,  0,  0,
          5, 10, 10, -20, -20, 10, 10,  5,
          5, -5, -10,  0,  0, -10, -5,  5,
          0,  0,  0, 20, 20,  0,  0,  0,
          5,  5, 10, 25, 25, 10,  5,  5,
          10, 10, 20, 30, 30, 20, 10, 10,
          50, 50, 50, 50, 50, 50, 50, 50,
          0,  0,  0,  0,  0,  0,  0,  0),
    'N': (-50, -40, -30, -30, -30, -30, -40, -50,
          -40, -20,  0,  0,  0,  0, -20, -40,
          -30,  0, 10, 15, 15, 10,  0, -30,
          -30,  5, 15, 20, 20, 15,  5, -30,
          -30,  0, 15, 20, 20, 15,  0, -30,
          -30,  5, 10, 15, 15, 10,  5, -30,
          -40, -20,  0,  5,  5,  0, -20, -40,
          -50, -40, -30, -30, -30, -30, -40, -50),
    'B': (-20, -10, -10, -10, -10, -10, -10, -20,
          -10,  0,  0,  0,  0,  0,  0, -10,
          -10, 10, 10, 10, 10, 10, 10, -10,
          -10,  0, 10, 10, 10, 10,  0, -10,
          -10,  5,  5, 10, 10,  5,  5, -10,
          -10,  0,  5, 10, 10,  5,  0, -10,
          -10,  0,  0,  0,  0,  0,  0, -10,
          -20, -10, -10, -10, -10, -10, -10, -20),
    'R': (0,  0,  0,  5,  5,  0,  0,  0,
          -5,  0,  0,  0,  0,  0,  0, -5,
          -5,  0,  0,  0,  0,  0,  0, -5,
          -5,  0,  0,  0,  0,  0,  0, -5,
          -5,  0,  0,  0,  0,  0,  0, -5,
          -5,  0,  0,  0,  0,  0,  0, -5,
          5, 10, 10, 10, 10, 10, 10,  5,
          0,  0,  0,  0,  0,  0,  0,  0),
    'Q': (-20, -10, -10, -5, -5, -10, -10, -20,
          -10,  0,  0,  0,  0,  5,  0, -10,
          -10,  0,  5,  5,  5,  5,  5, -10,
          -5,  0,  5,  5,  5,  5,  0, 0,
          -5,  0,  5,  5,  5,  5,  0, -5,
          -10,  0,  5,  5,  5,  5,  0, -10,
          -10,  0,  0,  0,  0,  0,  0, -10,
          -20, -10, -10, -5, -5, -10, -10, -20),
    'K': (20, 30, 10,  0,  0, 10, 30, 20,
          20, 20,  0,  0,  0,  0, 20, 20,
          -10, -20, -20, -20, -20, -20, -20, -10,
          -20, -30, -30, -40, -40, -30, -30, -20,
          -30, -40, -40, -50, -50, -40, -40, -30,
          -30, -40, -40, -50, -50, -40, -40, -30,
          -30, -40, -40, -50, -50, -40, -40, -30,
          -30, -40, -40, -50, -50, -40, -40, -30,)
}

# basic eval function using PSTs, made using sunfish as reference


def move(move: chess.Move, board: chess.Board) -> int:
    start, end = move.from_square, move.to_square
    start_piece, end_piece = str(
        board.piece_at(start)), str(board.piece_at(end))
    player_color = start_piece.isupper()
    enemy_color = not player_color

    score = pst[start_piece][end] - pst[start_piece][start]

    # captures
    if end_piece != "None":
        score += pst[end_piece][end]
        score += values[end_piece.upper()]

    # castling
    if start_piece.upper() == "K" and abs(start - end) == 2:
        if player_color:
            score += pst['R'][(start+end)//2]
            score -= pst['R'][chess.A1 if end < start else chess.H1]
        else:
            score += pst['r'][(start+end)//2]
            score -= pst['r'][int(chess.A8) if end < start else int(chess.H8)]

    # promotion and other pawn stuff
    if move.promotion is not None:
        score += pst[chess.piece_symbol(move.promotion)][end]
        score += values[chess.piece_symbol(move.promotion).upper()]
    elif end == board.ep_square:
        score += pst['p' if player_color else 'P'][end +
                                                   (-8 if player_color else 8)]

    return score
